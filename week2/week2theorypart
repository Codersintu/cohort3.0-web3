How Blockchains do auth========If you ever want to create an account on a blockchain, you need to generate a public-private keypair.
<!--  -->
Public Key: The public key is a string that can be shared openly.
<!--  -->
Private key: The private key is a secret string that must be kept confidential. 
<!--  -->
What is a Bit?
A bit is the smallest unit of data in a computer and can have one of two values: 0 or 1.
Think of a bit like a light switch that can be either off (0) or on (1)
<!--  -->
<!--  -->
What is a byte?
A byte is a group of 8 bits. It’s the standard unit of data used to represent a single character in memory. Since each bit can be either 0 or 1, a byte can have 2^8 (256) possible values, ranging from 0 to 255
<!--  -->
<!--  -->
Array of bytes
const bytes = [202, 244, 1, 23]
console.log(bytes);
<!--  -->
<!--  -->
UInt8Array
A better way to represent an array of bytes is to use a UInt8Array in JS
let bytes = new Uint8Array([0, 255, 127, 128]);
console.log(bytes)
<!--  -->
<!--  -->
Why use UInt8Array over native arrays ?***
((1))=They use less space. Every number takes 64 bits (8 bytes). But every value in a UInt8Array takes 1 byte.

((2))=UInt8Array Enforces constraints - It makes sure every element doesn’t exceed 255.
<!--  -->
<!--  -->
Encodings***
Bytes are cool but highly unreadable. Imagine telling someone
Hey, my name is 00101011101010101020
It’s easier to encode data so it is more human readable . Some common encodings include - 
1.Ascii
2.Hex
3.Base64
4.Base58
<!--  -->
<!--  -->
1.Ascii
  1 character = 7 bits
  <!-- coding part-1 go to week2.js file -->
<!--  -->
<!--  -->
2.Hex
1 character = 4 bits
A single hex character can be any of the 16 possible values: 0-9 and A-F.
<!-- coding part-2 go to week2.js file -->
<!--  -->
Base64
1 character = 6 bits
Base64 encoding uses 64 different characters (A-Z, a-z, 0-9, +, /), which means each character can represent one of 64 possible values
<!-- coding part-3 go to week2.js file -->
<!--  -->
Base58
It is similar to Base64 but uses a different set of characters to avoid visually similar characters and to make the encoded output more user-friendly
Base58 uses 58 different characters:
Uppercase letters: A-Z (excluding I and O)
Lowercase letters: a-z (excluding l)
Numbers: 1-9 (excluding 0)
+ , /
<!-- coding part4 go to week2.js -->
<!-- Next topic -->
Hashing
Hashing is a process of converting data (like a file or a message) into a fixed-size string of characters, which typically appears random. 
after hashing text you cannot decrypt.
Common hashing algorithms - SHA-256, MD5
<!-- Next topic -->
Encryption
Encryption is the process of converting plaintext data into an unreadable format, called ciphertext, using a specific algorithm and a key. The data can be decrypted back to its original form only with the appropriate key.
Key Characteristics:
Reversible: With the correct key, the ciphertext can be decrypted back to plaintext.
Key-dependent: The security of encryption relies on the secrecy of the key.
Two main types:
Symmetric encryption: The same key is used for both encryption and decryption.
Asymmetric encryption: Different keys are used for encryption (public key) and decryption (private key).
<!-- Next topic -->
Asymetric encryption
<!-- coding part-5 go to week2.js -->
<!--  -->
A miner is a computer (or person running the computer) that does heavy calculations to keep the Bitcoin network running.
Miners verify transactions (like when someone sends BTC from India to the US).
They add those transactions into a block (like a page in a digital notebook).
Once the block is full and solved, it’s added to the blockchain (public record)
<!--  -->
Example:
Suppose you want to send 0.01 BTC to your friend.
That transaction goes to the Bitcoin network.
Miners compete to solve a math puzzle (Proof of Work).
First miner who solves it gets:
Transaction fees from your transfer.
Block reward (currently 3.125 BTC as of April 2024 halving).

<!-- -->
Asymetric Encryption
Asymmetric encryption, also known as public-key cryptography, is a type of encryption that uses a pair of keys: a public key and a private key. The keys are mathematically related, but it is computationally infeasible to derive the private key from the public key.
Public Key: The public key is a string that can be shared openly
Private Key: The private key is a secret cryptographic code that must be kept confidential. It is used to decrypt data encrypted with the corresponding public key or to create digital signatures.
Common Asymmetric Encryption Algorithms:
RSA - Rivest–Shamir–Adleman
ECC - Elliptic Curve Cryptography (ECDSA) - ETH and BTC
EdDSA - Edwards-curve Digital Signature Algorithm  - SOL


